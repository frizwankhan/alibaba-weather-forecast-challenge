# -*- coding: utf-8 -*-
"""alibaba_comp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ERNxAaGykrh9onSjD0bRrc2k5EpHHxrP
"""

from google.colab import drive
drive.mount('/content/drive')

!nvidia-smi

import h5py
import numpy as np
import matplotlib.pyplot as plt

with h5py.File("/content/drive/MyDrive/data2/hdf_archives/20101115.hdf5") as h5_file:
  for gname, group in h5_file.items():
    print(h5_file[gname])
    plt.imshow(np.array(group[1,:,:], dtype=np.float32))

import h5py
import numpy as np
from pathlib import Path
import torch
from torch.utils import data
import os

class HDF5Dataset(data.Dataset):
    """Represents an abstract HDF5 dataset.
    
    Input params:
        file_path: Path to the folder containing the dataset (one or multiple HDF5 files).
        recursive: If True, searches for h5 files in subdirectories.
        load_data: If True, loads all the data immediately into RAM. Use this if
            the dataset is fits into memory. Otherwise, leave this at false and 
            the data will load lazily.
        data_cache_size: Number of HDF5 files that can be cached in the cache (default=3).
        transform: PyTorch transform to apply to every data instance (default=None).
    """
    def __init__(self, parent_path, data_cache_size=3, transform=None):
        super().__init__()
        self.data_info = {}
        self.transform = transform

        # Search for all h5 files
        
        files = [os.path.join(parent_path, file) for file in os.listdir(parent_path)]
        if len(files) < 1:
            raise RuntimeError('No hdf5 datasets found')

        idx = 0
        for h5dataset_fp in files:
          with h5py.File(h5dataset_fp) as h5_file:
            for dname, ds in h5_file.items():
              self.data_info[idx] = {"type": dname, "shape": ds.shape, "fp": h5dataset_fp}
              idx+=1
            # self._add_data_infos(str(h5dataset_fp.resolve()), load_data)
            
    def __getitem__(self, index):
        # get data
        fp = self.data_info[index]["fp"]
        x=None
        with h5py.File(fp) as hf_file:
          x = hf_file[self.data_info[index]["type"]]
          x = np.array(x[:,:,:], dtype=np.float32)

        return x

    def __len__(self):
        return len(self.data_info)

dataset = HDF5Dataset("/content/drive/MyDrive/data2/hdf_archives")

dataset[1].shape

len(dataset)

with h5py.File(dataset.data_info[0]["fp"]) as h_file:
  print(h_file[dataset.data_info[0]["type"]])

for i in range(dataset[0].shape[0]):
  ax = plt.gca()
  ax.imshow(dataset[0][i])
  plt.pause(.1)

import torch.nn as nn
import torch


class ConvLSTMCell(nn.Module):

    def __init__(self, input_dim, hidden_dim, kernel_size, bias):
        """
        Initialize ConvLSTM cell.
        Parameters
        ----------
        input_dim: int
            Number of channels of input tensor.
        hidden_dim: int
            Number of channels of hidden state.
        kernel_size: (int, int)
            Size of the convolutional kernel.
        bias: bool
            Whether or not to add the bias.
        """

        super(ConvLSTMCell, self).__init__()

        self.input_dim = input_dim
        self.hidden_dim = hidden_dim

        self.kernel_size = kernel_size
        self.padding = kernel_size[0] // 2, kernel_size[1] // 2
        self.bias = bias

        self.conv = nn.Conv2d(in_channels=self.input_dim + self.hidden_dim,
                              out_channels=4 * self.hidden_dim,
                              kernel_size=self.kernel_size,
                              padding=self.padding,
                              bias=self.bias)

    def forward(self, input_tensor, cur_state):
        h_cur, c_cur = cur_state

        combined = torch.cat([input_tensor, h_cur], dim=1)  # concatenate along channel axis

        combined_conv = self.conv(combined)
        cc_i, cc_f, cc_o, cc_g = torch.split(combined_conv, self.hidden_dim, dim=1)
        i = torch.sigmoid(cc_i)
        f = torch.sigmoid(cc_f)
        o = torch.sigmoid(cc_o)
        g = torch.tanh(cc_g)

        c_next = f * c_cur + i * g
        h_next = o * torch.tanh(c_next)

        return h_next, c_next

    def init_hidden(self, batch_size, image_size):
        height, width = image_size
        return (torch.zeros(batch_size, self.hidden_dim, height, width, device=self.conv.weight.device),
                torch.zeros(batch_size, self.hidden_dim, height, width, device=self.conv.weight.device))


class ConvLSTM(nn.Module):

    """
    Parameters:
        input_dim: Number of channels in input
        hidden_dim: Number of hidden channels
        kernel_size: Size of kernel in convolutions
        num_layers: Number of LSTM layers stacked on each other
        batch_first: Whether or not dimension 0 is the batch or not
        bias: Bias or no bias in Convolution
        return_all_layers: Return the list of computations for all layers
        Note: Will do same padding.
    Input:
        A tensor of size B, T, C, H, W or T, B, C, H, W
    Output:
        A tuple of two lists of length num_layers (or length 1 if return_all_layers is False).
            0 - layer_output_list is the list of lists of length T of each output
            1 - last_state_list is the list of last states
                    each element of the list is a tuple (h, c) for hidden state and memory
    Example:
        >> x = torch.rand((32, 10, 64, 128, 128))
        >> convlstm = ConvLSTM(64, 16, 3, 1, True, True, False)
        >> _, last_states = convlstm(x)
        >> h = last_states[0][0]  # 0 for layer index, 0 for h index
    """

    def __init__(self, input_dim, hidden_dim, kernel_size, num_layers,
                 batch_first=False, bias=True, return_all_layers=False):
        super(ConvLSTM, self).__init__()

        #self._check_kernel_size_consistency(kernel_size)

        # Make sure that both `kernel_size` and `hidden_dim` are lists having len == num_layers
        kernel_size = self._extend_for_multilayer(kernel_size, num_layers)
        hidden_dim = self._extend_for_multilayer(hidden_dim, num_layers)
        if not len(kernel_size) == len(hidden_dim) == num_layers:
            raise ValueError('Inconsistent list length.')

        self.input_dim = input_dim
        self.hidden_dim = hidden_dim
        self.kernel_size = kernel_size
        self.num_layers = num_layers
        self.batch_first = batch_first
        self.bias = bias
        self.return_all_layers = return_all_layers

        cell_list = []
        for i in range(0, self.num_layers):
            cur_input_dim = self.input_dim if i == 0 else self.hidden_dim[i - 1]

            cell_list.append(ConvLSTMCell(input_dim=cur_input_dim,
                                          hidden_dim=self.hidden_dim[i],
                                          kernel_size=self.kernel_size[i],
                                          bias=self.bias))

        self.cell_list = nn.ModuleList(cell_list)

    def forward(self, input_tensor, hidden_state=None):
        """
        Parameters
        ----------
        input_tensor: todo
            5-D Tensor either of shape (t, b, c, h, w) or (b, t, c, h, w)
        hidden_state: todo
            None. todo implement stateful
        Returns
        -------
        last_state_list, layer_output
        """
        if not self.batch_first:
            # (t, b, c, h, w) -> (b, t, c, h, w)
            input_tensor = input_tensor.permute(1, 0, 2, 3, 4)

        b, _, _, h, w = input_tensor.size()

        # Implement stateful ConvLSTM
        if hidden_state is not None:
            raise NotImplementedError()
        else:
            # Since the init is done in forward. Can send image size here
            hidden_state = self._init_hidden(batch_size=b,
                                             image_size=(h, w))

        layer_output_list = []
        last_state_list = []

        seq_len = input_tensor.size(1)
        cur_layer_input = input_tensor

        for layer_idx in range(self.num_layers):

            h, c = hidden_state[layer_idx]
            output_inner = []
            for t in range(seq_len):
                h, c = self.cell_list[layer_idx](input_tensor=cur_layer_input[:, t, :, :, :],
                                                 cur_state=[h, c])
                output_inner.append(h)

            layer_output = torch.stack(output_inner, dim=1)
            cur_layer_input = layer_output

            layer_output_list.append(layer_output)
            last_state_list.append([h, c])

        if not self.return_all_layers:
            layer_output_list = layer_output_list[-1:]
            last_state_list = last_state_list[-1:]

        return layer_output_list, last_state_list

    def _init_hidden(self, batch_size, image_size):
        init_states = []
        for i in range(self.num_layers):
            init_states.append(self.cell_list[i].init_hidden(batch_size, image_size))
        return init_states

    @staticmethod
    def _check_kernel_size_consistency(kernel_size):
        if not (isinstance(kernel_size, tuple) or
                (isinstance(kernel_size, list) and all([isinstance(elem, tuple) for elem in kernel_size]))):
            raise ValueError('`kernel_size` must be tuple or list of tuples')

    @staticmethod
    def _extend_for_multilayer(param, num_layers):
        if not isinstance(param, list):
            param = [param] * num_layers
        return param

x = torch.rand((32, 10, 1, 128, 128))
convlstm = ConvLSTM(input_dim=1, hidden_dim=1, kernel_size=[(3,3), (3,3)], num_layers=2,
                 batch_first=True, bias=True, return_all_layers=False)
_, last_states = convlstm(x)

last_states[0][1].size()

# # train new model
# device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# Convlstm = ConvLSTM(input_dim=1, hidden_dim=1, kernel_size=[(3,3), (3,3)], num_layers=2,
#                  batch_first=True, bias=True, return_all_layers=False).to(device)
# optimizer = torch.optim.Adam(lr = 0.001, params = Convlstm.parameters())

# continue from checkpoint
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
Convlstm = ConvLSTM(input_dim=1, hidden_dim=1, kernel_size=[(3,3), (3,3)], num_layers=2,
                 batch_first=True, bias=True, return_all_layers=False).to(device)
optimizer = torch.optim.Adam(lr = 0.001, params = Convlstm.parameters())
path = '/content/drive/MyDrive/data2/checkpoint/epoch1model.pt' # change to current path 
checkpoint = torch.load(path, map_location='cuda')
Convlstm.load_state_dict(checkpoint['model_state_dict'])
optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
epoch = checkpoint['epoch']
train_loss = checkpoint['train_loss']
test_loss = checkpoint["test_loss"]

# Convlstm.train()

train_loss

batch_size = 32
epoch_start = 1
epochs=10
from sklearn.model_selection import train_test_split
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

criterion = nn.MSELoss()

def train(X,Y):

    _, last_states = Convlstm(X)
    pred = last_states[0][1]
    optimizer.zero_grad()
    loss = criterion(pred, Y)
    loss.backward()
    optimizer.step()
    return loss.detach().item()

def test(X,Y):
  with torch.no_grad():
    _, last_states = Convlstm(X)
    pred = last_states[0][1]
    loss = criterion(pred, Y)
    return loss.detach().item()

nums = list(range(len(dataset)))
train_nums,test_nums = train_test_split(nums,test_size = 0.2,random_state=42) 

training_epoch_losses = []

testing_epoch_losses = []

for epoch in range(epoch_start, epochs):
    PATH = f"/content/drive/MyDrive/data2/checkpoint/epoch{epoch+1}model.pt"
    batch_data = []
    train_epoch_loss = 0
    test_epoch_loss = 0

    #### TRAINING ####
    Convlstm.train()
    for j in train_nums:
        data  = dataset[j]
        n = data.shape[0]//24
        for i in range(n):
            if i==n-1 and data.shape[0]%24 !=0:
              k = np.random.randint(i*24, data.shape[0]-24)
              arr = data[k:k+24]
            else: 
              arr = data[i*24:(i+1)*24]
            arr = np.expand_dims(arr, axis=1)
            batch_data.append(arr)
            if len(batch_data)==batch_size: 
                    batch_data = np.array(batch_data) 
                    X = batch_data[:,:12]
                    Y = batch_data[:,-1,:,:,:]
                    X = torch.from_numpy(X).to(device)
                    Y = torch.from_numpy(Y).to(device)
                    training_loss = train(X,Y)
                    train_epoch_loss += training_loss
                    batch_data = []
    
    training_epoch_losses.append(train_epoch_loss)
    print(f"training loss for {epoch}th epoch:",train_epoch_loss)                         #training loss after all the batches in a day is processed

    #### TESTING #####
    Convlstm.eval()
    for j in test_nums:
        data  = dataset[j]
        n = data.shape[0]//24
        for i in range(n):
            if i==n-1 and data.shape[0]%24 !=0:
              k = np.random.randint(i*24, data.shape[0]-24)
              arr = data[k:k+24]
            else: 
              arr = data[i*24:(i+1)*24]
            arr = np.expand_dims(arr, axis=1)
            batch_data.append(arr)
            if len(batch_data)==batch_size: 
                batch_data = np.array(batch_data) 
                X = batch_data[:,:12, :, :, :]
                Y = batch_data[:,-1,:,:,:]
                X = torch.from_numpy(X).to(device)
                Y = torch.from_numpy(Y).to(device)
                testing_loss = test(X, Y)
                test_epoch_loss += testing_loss
                batch_data = []
    
    testing_epoch_losses.append(test_epoch_loss)
    print(f"testing loss for {epoch}th epoch:",test_epoch_loss)

    torch.save({
            'epoch': epoch+1,
            'model_state_dict': Convlstm.state_dict(),
            'optimizer_state_dict': optimizer.state_dict(),
            'train_loss': training_epoch_losses,
            'test_loss': testing_epoch_losses
            }, PATH)





































































































model = ConvLSTM(input_dim=1, hidden_dim=1, kernel_size=[(3,3), (3,3)], num_layers=2,
                 batch_first=True, bias=True, return_all_layers=False)
optimizer = torch.optim.Adam(lr = 0.001, params = model.parameters())

checkpoint = torch.load(PATH)
model.load_state_dict(checkpoint['model_state_dict'])
optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
epoch = checkpoint['epoch']
train_loss = checkpoint['train_loss']
test_loss = check_point["test_loss"]

model.eval()

plt.plot(range(len(training_epoch_losses)), training_epoch_losses, label="Training loss")
plt.plot(range(len(testing_epoch_losses)), testing_epoch_losses, label="Testing loss")
plt.legend()
plt.xlabel("epochs")
plt.ylabel("loss")
plt.title("Loss vs Epochs")